// === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø API-–ö–õ–Æ–ß–ï–ô ===
const BITQUERY_API_KEY = 'ory_at_PLs7PLFfYMM0kwFc5pRG1TorLuYz279TFJS-w6q8xQc.yBCHdlCBJiQ6DaVPTjqRx51d3UpUt0tNJoZ5x9ctOuA';
const TRONGRID_API_KEY = '6f1ae13f-3084-44c6-ac92-012e26c552cf'; // <-- –í–ê–® –ö–õ–Æ–ß TRONGRID
// const SOLANA_API_KEY = ''; // –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å

// === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø API URL ===
const BITQUERY_ENDPOINT = 'https://graphql.bitquery.io';
const BLOCKCHAIN_API_URL = 'https://blockchain.info/rawaddr/';
const TRON_API_URL = 'https://api.trongrid.io/v1/accounts/';
const SOLANA_API_URL = 'https://api.mainnet-beta.solana.com';

// –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Å–µ—Ç–∏
const SUPPORTED_NETWORKS = {
    ETH: {
        name: 'Ethereum',
        prefix: '0x',
        length: 42,
        api: 'bitquery'
    },
    BTC: {
        name: 'Bitcoin',
        prefix: ['1', '3', 'bc1'],
        length: [26, 35, 42],
        api: 'blockchain'
    },
    BSC: {
        name: 'Binance Smart Chain',
        prefix: '0x',
        length: 42,
        api: 'bitquery'
    },
    TRX: {
        name: 'Tron',
        prefix: 'T',
        length: 34,
        api: 'tron'
    },
    SOL: {
        name: 'Solana',
        prefix: '',
        length: 44,
        api: 'solana'
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ—Ç–∏ –ø–æ –∞–¥—Ä–µ—Å—É
function detectNetwork(address) {
    const normalizedAddress = address.toLowerCase();
    
    for (const [network, config] of Object.entries(SUPPORTED_NETWORKS)) {
        if (Array.isArray(config.prefix)) {
            if (config.prefix.some(prefix => normalizedAddress.startsWith(prefix))) {
                return network;
            }
        } else if (normalizedAddress.startsWith(config.prefix)) {
            return network;
        }
    }
    
    return null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Bitquery API
async function queryBitquery(query) {
    try {
        const response = await fetch(BITQUERY_ENDPOINT, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-API-KEY': BITQUERY_API_KEY
            },
            body: JSON.stringify({ query })
        });
        return await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Bitquery:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Blockchain API
async function queryBlockchain(address) {
    try {
        const response = await fetch(`${BLOCKCHAIN_API_URL}${address}`);
        return await response.json();
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Blockchain API:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Tron API
async function queryTron(address) {
    try {
        const response = await fetch(`${TRON_API_URL}${address}`, {
            headers: {
                'TRON-PRO-API-KEY': TRONGRID_API_KEY
            }
        });
        const data = await response.json();
        
        if (data.error) {
            throw new Error(data.error);
        }
        
        return {
            balance: data.balance / 1000000, // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ SUN –≤ TRX
            trc20: data.trc20 || {},
            transactions: data.transactions || []
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Tron API:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ Solana API
async function querySolana(address) {
    try {
        const response = await fetch(SOLANA_API_URL, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                jsonrpc: '2.0',
                id: 1,
                method: 'getAccountInfo',
                params: [
                    address,
                    {
                        encoding: 'jsonParsed'
                    }
                ]
            })
        });
        const data = await response.json();
        
        if (data.error) {
            throw new Error(data.error.message);
        }
        
        return {
            balance: data.result.value.lamports / 1000000000, // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ lamports –≤ SOL
            owner: data.result.value.owner,
            executable: data.result.value.executable
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Solana API:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ ethers.js
async function getEthersBaseInfo(address) {
    try {
        const provider = new ethers.JsonRpcProvider("https://green-thrumming-mountain.quiknode.pro/8a77a6ba8c1788e8a4c683d8fb4b85e52c4fe66f/");
        const [balance, txCount, block, ensName] = await Promise.all([
            provider.getBalance(address),
            provider.getTransactionCount(address),
            provider.getBlock("latest"),
            provider.lookupAddress(address)
        ]);
        return {
            eth_balance: ethers.formatEther(balance),
            nonce: txCount,
            gasLimit: block.gasLimit.toString(),
            ens: ensName || "‚Äî"
        };
    } catch (err) {
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—à–µ–ª—å–∫–∞
async function analyzeWallet(address) {
    const network = detectNetwork(address);
    if (!network) {
        throw new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞');
    }

    try {
        let result = { network: SUPPORTED_NETWORKS[network].name };

        switch (SUPPORTED_NETWORKS[network].api) {
            case 'bitquery':
                const bitqueryQuery = `
                    query {
                        ${network.toLowerCase()} {
                            address(address: {is: "${address}"}) {
                                balance
                                smartContract {
                                    contractType
                                    currency {
                                        symbol
                                        name
                                    }
                                }
                                tokenBalances {
                                    currency {
                                        address
                                        symbol
                                        name
                                        decimals
                                    }
                                    value
                                }
                                transactions {
                                    hash
                                    value
                                    timestamp
                                    from {
                                        address
                                    }
                                    to {
                                        address
                                    }
                                }
                            }
                        }
                    }
                `;
                const [bitqueryData, ethersBase] = await Promise.all([
                    queryBitquery(bitqueryQuery),
                    network === 'ETH' ? getEthersBaseInfo(address) : Promise.resolve(null)
                ]);
                result.bitquery = bitqueryData.data[network.toLowerCase()].address;
                if (ethersBase) result.ethers = ethersBase;
                break;

            case 'blockchain':
                const blockchainData = await queryBlockchain(address);
                result.blockchain = {
                    total_transactions: blockchainData.n_tx,
                    total_received: blockchainData.total_received / 100000000,
                    total_sent: blockchainData.total_sent / 100000000,
                    final_balance: blockchainData.final_balance / 100000000,
                    transactions: blockchainData.txs.slice(0, 5).map(tx => ({
                        hash: tx.hash,
                        time: new Date(tx.time * 1000).toLocaleString(),
                        size: tx.size,
                        fee: tx.fee / 100000000
                    }))
                };
                break;

            case 'tron':
                const tronData = await queryTron(address);
                result.tron = tronData;
                break;

            case 'solana':
                const solanaData = await querySolana(address);
                result.solana = solanaData;
                break;
        }

        return result;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ—à–µ–ª—å–∫–∞:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–≤–æ–¥–∞
function formatOutput(data) {
    if (!data) return '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
    
    let output = `=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ—à–µ–ª—å–∫–µ (${data.network}) ===\n\n`;
    
    if (data.ethers) {
        output += `üìç –ê–¥—Ä–µ—Å: ...\n`;
        output += `üî† ENS: ${data.ethers.ens}\n`;
        output += `üí∞ –ë–∞–ª–∞–Ω—Å (ethers.js): ${data.ethers.eth_balance} ETH\n`;
        output += `üîÅ –ö–æ–ª-–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (nonce): ${data.ethers.nonce}\n`;
        output += `‚õΩ –ì–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–ª–æ–∫–∞: ${data.ethers.gasLimit}\n`;
    }

    if (data.bitquery) {
        output += `\n–ë–∞–ª–∞–Ω—Å (Bitquery): ${data.bitquery.balance} ${data.network === 'ETH' ? 'ETH' : 'BNB'}\n`;
        
        if (data.bitquery.smartContract) {
            output += `–¢–∏–ø –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: ${data.bitquery.smartContract.contractType}\n`;
            if (data.bitquery.smartContract.currency) {
                output += `–¢–æ–∫–µ–Ω: ${data.bitquery.smartContract.currency.symbol} (${data.bitquery.smartContract.currency.name})\n`;
            }
            output += '\n';
        }
        
        if (data.bitquery.tokenBalances && data.bitquery.tokenBalances.length > 0) {
            output += '–¢–æ–∫–µ–Ω—ã (ERC-20):\n';
            data.bitquery.tokenBalances.slice(0, 10).forEach(token => {
                output += `- ${token.currency.symbol}: ${token.value / Math.pow(10, token.currency.decimals)}\n`;
            });
        }
        
        if (data.bitquery.transactions && data.bitquery.transactions.length > 0) {
            output += '\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n';
            data.bitquery.transactions.slice(0, 10).forEach(tx => {
                output += `\n–•–µ—à: ${tx.hash}\n`;
                output += `–°—É–º–º–∞: ${tx.value} ${data.network === 'ETH' ? 'ETH' : 'BNB'}\n`;
                output += `–û—Ç: ${tx.from.address}\n`;
                output += `–ö–æ–º—É: ${tx.to.address}\n`;
                output += `–í—Ä–µ–º—è: ${new Date(tx.timestamp).toLocaleString()}\n`;
            });
        }
    }

    if (data.blockchain) {
        output += '\n=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö ===\n\n';
        output += `–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${data.blockchain.total_transactions}\n`;
        output += `–û–±—â–∏–π –æ–±—ä–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤: ${data.blockchain.total_received} BTC\n`;
        output += `–û–±—â–∏–π –æ–±—ä–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤: ${data.blockchain.total_sent} BTC\n`;
        output += `–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${data.blockchain.final_balance} BTC\n\n`;
        
        if (data.blockchain.transactions && data.blockchain.transactions.length > 0) {
            output += '–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n';
            data.blockchain.transactions.forEach(tx => {
                output += `\n–•–µ—à: ${tx.hash}\n`;
                output += `–í—Ä–µ–º—è: ${tx.time}\n`;
                output += `–†–∞–∑–º–µ—Ä: ${tx.size} –±–∞–π—Ç\n`;
                output += `–ö–æ–º–∏—Å—Å–∏—è: ${tx.fee} BTC\n`;
            });
        }
    }

    if (data.tron) {
        output += `\n–ë–∞–ª–∞–Ω—Å: ${data.tron.balance} TRX\n\n`;
        
        if (Object.keys(data.tron.trc20).length > 0) {
            output += 'TRC20 –¢–æ–∫–µ–Ω—ã:\n';
            for (const [token, balance] of Object.entries(data.tron.trc20)) {
                output += `${token}: ${balance}\n`;
            }
            output += '\n';
        }
        
        if (data.tron.transactions && data.tron.transactions.length > 0) {
            output += '–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n';
            data.tron.transactions.slice(0, 5).forEach(tx => {
                output += `\n–•–µ—à: ${tx.txID}\n`;
                output += `–í—Ä–µ–º—è: ${new Date(tx.raw_data.timestamp).toLocaleString()}\n`;
            });
        }
    }

    if (data.solana) {
        output += `\n–ë–∞–ª–∞–Ω—Å: ${data.solana.balance} SOL\n`;
        output += `–í–ª–∞–¥–µ–ª–µ—Ü: ${data.solana.owner}\n`;
        output += `–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π: ${data.solana.executable ? '–î–∞' : '–ù–µ—Ç'}\n`;
    }
    
    return output;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
document.getElementById('analyze-btn').addEventListener('click', async () => {
    const address = document.getElementById('wallet-address').value.trim();
    const outputBlock = document.getElementById('output-block');
    
    if (!address) {
        outputBlock.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞';
        return;
    }
    
    try {
        outputBlock.textContent = '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...';
        const walletData = await analyzeWallet(address);
        outputBlock.textContent = formatOutput(walletData);
    } catch (error) {
        outputBlock.textContent = error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
    }
}); 