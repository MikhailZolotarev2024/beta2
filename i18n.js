// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
window.currentLang = 'en'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
let translations = {};

// –î–æ—Å—Ç—É–ø–Ω—ã–µ —è–∑—ã–∫–∏
const AVAILABLE_LANGUAGES = ['pl', 'ru', 'en'];
const LANGUAGE_NAMES = {
  'pl': 'Polski',
  'ru': '–†—É—Å—Å–∫–∏–π', 
  'en': 'English'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function detectUserLanguage() {
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º localStorage
  const savedLang = localStorage.getItem('preferredLang');
  if (savedLang && AVAILABLE_LANGUAGES.includes(savedLang)) {
    console.log('üåç Using saved language from localStorage:', savedLang);
    return savedLang;
  }

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞
  const browserLang = navigator.language || navigator.userLanguage || 'en';
  const primaryLang = browserLang.split('-')[0].toLowerCase();
  
  console.log('üåç Browser language detected:', browserLang, 'Primary:', primaryLang);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫
  if (AVAILABLE_LANGUAGES.includes(primaryLang)) {
    console.log('‚úÖ Using detected language:', primaryLang);
    return primaryLang;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —è–∑—ã–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞
  if (navigator.languages) {
    for (const lang of navigator.languages) {
      const langCode = lang.split('-')[0].toLowerCase();
      if (AVAILABLE_LANGUAGES.includes(langCode)) {
        console.log('‚úÖ Using language from navigator.languages:', langCode);
        return langCode;
      }
    }
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
  console.log('üåç Using default language: en');
  return 'en';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞ –≤ localStorage
function saveLanguage(lang) {
  localStorage.setItem('preferredLang', lang);
  console.log('üíæ Language saved to localStorage:', lang);
}

function getBasePath() {
  return window.location.origin.includes('github.io') ? `/${window.location.pathname.split('/')[1]}` : '';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—è —è–∑—ã–∫–æ–≤
//function createLanguageSwitcher() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
  //if (document.querySelector('.language-switcher')) {
  //  return;
//  }

  const switcher = document.createElement('div');
  switcher.className = 'language-switcher';
  switcher.innerHTML = `
    <select class="lang-select">
      ${AVAILABLE_LANGUAGES.map(lang => 
        `<option value="${lang}" ${lang === window.currentLang ? 'selected' : ''}>
          ${LANGUAGE_NAMES[lang]}
        </option>`
      ).join('')}
    </select>
  `;

  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
  const style = document.createElement('style');
  style.textContent = `
    .language-switcher {
      position: fixed;
      top: 20px;
      right: 20px;
      z-index: 1000;
    }
    
    .lang-select {
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 8px;
      color: #fff;
      padding: 8px 12px;
      font-size: 14px;
      cursor: pointer;
      backdrop-filter: blur(10px);
      transition: all 0.3s ease;
    }
    
    .lang-select:hover {
      background: rgba(255, 255, 255, 0.15);
      border-color: rgba(118, 199, 192, 0.5);
    }
    
    .lang-select:focus {
      outline: none;
      border-color: rgba(118, 199, 192, 0.8);
      box-shadow: 0 0 10px rgba(118, 199, 192, 0.3);
    }
    
    .lang-select option {
      background: #1a1a1a;
      color: #fff;
    }
    
    /* –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö */
    @media (max-width: 768px) {
      .language-switcher {
        top: 10px;
        right: 10px;
      }
      
      .lang-select {
        font-size: 12px;
        padding: 6px 8px;
      }
    }
  `;
  




async function loadLang(lang) {
  const base = getBasePath();
  const url = `${base}/lang/${lang}.json`;
  console.log('üåç Loading translations from:', url);

  try {
    // –ó–∞–≥—Ä—É–∑–∫–∞ JSON
    console.log('üì• Fetching translations...');
    const res = await fetch(url);
    console.log('üì¶ Fetch response:', {
      status: res.status,
      statusText: res.statusText,
      headers: Object.fromEntries(res.headers.entries())
    });

    if (!res.ok) {
      throw new Error(`HTTP error! status: ${res.status}`);
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    const rawText = await res.text();
    console.log('üìÑ Raw JSON text:', rawText);

    // –ü–∞—Ä—Å–∏–Ω–≥ JSON
    try {
      translations = JSON.parse(rawText);
      console.log('‚úÖ JSON parsed successfully:', translations);
    } catch (parseError) {
      console.error('‚ùå JSON parse error:', parseError);
      throw new Error(`JSON parse error: ${parseError.message}`);
    }

    window.currentLang = lang;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const elements = document.querySelectorAll('[data-i18n]');
    console.log(`üîç Found ${elements.length} elements with data-i18n`);
    
    const translatedKeys = new Set();
    const missingKeys = new Set();
    
    elements.forEach(el => {
      const key = el.getAttribute('data-i18n');
      if (translations[key]) {
        el.innerHTML = translations[key];
        translatedKeys.add(key);
      } else {
        missingKeys.add(key);
        console.warn(`‚ùó Missing translation for key: ${key}`);
      }
    });

    console.log('‚úÖ Successfully translated keys:', Array.from(translatedKeys));
    if (missingKeys.size > 0) {
      console.warn('‚ö†Ô∏è Missing translations for keys:', Array.from(missingKeys));
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    const placeholders = document.querySelectorAll('[data-i18n-placeholder]');
    console.log(`üîç Found ${placeholders.length} elements with data-i18n-placeholder`);
    
    placeholders.forEach(el => {
      const key = el.getAttribute('data-i18n-placeholder');
      if (translations[key]) {
        el.placeholder = translations[key];
        translatedKeys.add(key);
      } else {
        missingKeys.add(key);
        console.warn(`‚ùó Missing translation for placeholder key: ${key}`);
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—É—Å–µ–ª—å –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
    if (typeof updateNewsCarousel === 'function') {
      console.log('üîÑ Updating news carousel...');
      const newsCards = document.querySelectorAll('.news-card');
      console.log(`üì∞ Found ${newsCards.length} news cards`);
      
      const newsData = typeof getTranslatedNews === 'function' ? getTranslatedNews() : null;
      console.log('üì∞ News data:', newsData);
      
      updateNewsCarousel();
      console.log('‚úÖ News carousel updated');
    }

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏
    window.newsCarouselInitialized = false;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—É—Å–µ–ª—å –Ω–æ–≤–æ—Å—Ç–µ–π
    if (typeof initNewsCarousel === 'function') {
      console.log('üé† Initializing news carousel...');
      const newsCards = document.querySelectorAll('.news-card');
      console.log(`üì∞ Found ${newsCards.length} news cards`);
      
      const newsData = typeof getTranslatedNews === 'function' ? getTranslatedNews() : null;
      console.log('üì∞ News data:', newsData);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–∞—Ä—É—Å–µ–ª–∏
      const newsCarousel = document.getElementById('newsCarousel');
      if (newsCarousel) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º requestAnimationFrame –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏, —á—Ç–æ DOM –æ–±–Ω–æ–≤–ª–µ–Ω
        requestAnimationFrame(() => {
          initNewsCarousel();
          window.newsCarouselInitialized = true;
          console.log('‚úÖ News carousel initialized');
        });
      } else {
        console.warn('‚ö†Ô∏è News carousel element not found');
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–æ–≤
    const langSelect = document.querySelector('.lang-select');
    if (langSelect) {
      langSelect.value = lang;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
    if (window.location.pathname.includes('index4.html') && typeof loadMarkdown === 'function') {
      // –í—ã–∑—ã–≤–∞–µ–º –∑–∞–Ω–æ–≤–æ –∑–∞–≥—Ä—É–∑–∫—É —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞
      const activeButton = document.querySelector('.nav-links button.active');
      const activePointId = activeButton?.getAttribute('onclick')?.match(/loadMarkdown\('([^']+)'\)/)?.[1] || 'point1';
      loadMarkdown(activePointId);
    }

    return translations;
  } catch (error) {
    console.error('‚ùå Error loading translations:', {
      message: error.message,
      stack: error.stack,
      cause: error.cause
    });
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
async function applyLanguage(lang) {
  try {
    console.log('üîÑ Applying language:', lang);
    await loadLang(lang);
    saveLanguage(lang);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç lang —É html
    document.documentElement.lang = lang;
    
    console.log('‚úÖ Language applied successfully:', lang);
  } catch (error) {
    console.error('‚ùå Error applying language:', error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —è–∑—ã–∫–∞
async function initLanguage() {
  try {
    console.log('üöÄ Initializing language system...');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userLang = detectUserLanguage();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —è–∑—ã–∫
    await applyLanguage(userLang);
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–æ–≤
    //createLanguageSwitcher();
    
    console.log('‚úÖ Language system initialized');
  } catch (error) {
    console.error('‚ùå Error initializing language system:', error);
  }
}

function t(key, params = {}) {
  let text = translations[key];
  
  if (!text) {
    console.warn(`‚ö†Ô∏è Translation key not found: "${key}"`);
    text = key;
  }
  
  // –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ
  Object.entries(params).forEach(([param, value]) => {
    text = text.replace(`{${param}}`, value);
  });
  
  return text;
}

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–º–∏
window.t = t;
window.applyLanguage = applyLanguage;
window.initLanguage = initLanguage;
window.detectUserLanguage = detectUserLanguage;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
function formatNumber(number, decimals = 6) {
  return Number(number).toFixed(decimals);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
function formatTokens(tokens) {
  return tokens.map(t => `${t.tokenName}: ${formatNumber(t.balance/10**(t.tokenDecimal||6))}`).join(', ');
} 
